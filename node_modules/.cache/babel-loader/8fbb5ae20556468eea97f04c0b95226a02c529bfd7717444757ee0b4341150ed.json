{"ast":null,"code":"\"use strict\";\n\nvar iterateObj = require(\"iterate-object\"),\n  sliced = require(\"sliced\");\n\n/**\n * elly\n * Selects the DOM elements based on the provided selector. If there is no\n * commonjs/module environment, the `$` global variable will be created.\n *\n * @name elly\n * @function\n * @param {String|HTMLElement} input The element selector (e.g.\n * `'#my-id > .my-class'`), the element tag you want to create\n * (e.g. `'<ul>'`) or the HTML element (will be returned by the function).\n * @param {Object|HTMLElement} contextOrAttributes\n * @returns {HTMLElement} The HTMLElement that was provided or selected.\n */\nfunction $(input, contextOrAttributes) {\n  if (typeof input === \"string\") {\n    if (input.charAt(0) === \"<\") {\n      input = document.createElement(input.slice(1, -1));\n      iterateObj(contextOrAttributes || {}, function (value, name) {\n        switch (name) {\n          case \"text\":\n            input.textContent = value;\n            return;\n          case \"html\":\n            input.innerHTML = value;\n            return;\n        }\n        input.setAttribute(name, value);\n      });\n      return input;\n    } else {\n      contextOrAttributes = contextOrAttributes || document;\n      return contextOrAttributes.querySelector(input);\n    }\n  }\n  return input;\n}\n;\n\n/**\n * elly.$$\n * Selects multiple elements. Note that if there is no commonjs/module environment, you will access this function using `$.$$`.\n *\n * @name elly.$$\n * @function\n * @param {String} selector The DOM query selector.\n * @param {HTMLElement} context The element context/container. Defaults to `document`.\n * @returns {Array} The array of elements.\n */\n$.$$ = function (selector, context) {\n  if (typeof selector === \"string\") {\n    context = context || document;\n    return sliced(context.querySelectorAll(selector));\n  }\n  return [selector];\n};\nmodule.exports = $;","map":{"version":3,"names":["iterateObj","require","sliced","$","input","contextOrAttributes","charAt","document","createElement","slice","value","name","textContent","innerHTML","setAttribute","querySelector","$$","selector","context","querySelectorAll","module","exports"],"sources":["C:/Users/ashi3/Desktop/wED1/gifthub/2nd day/meghkhush2/deepshikha_jain_pw11_240/unit-7/sprint-2/day-1/you/portfolio/node_modules/elly/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar iterateObj = require(\"iterate-object\"),\n    sliced = require(\"sliced\");\n\n/**\n * elly\n * Selects the DOM elements based on the provided selector. If there is no\n * commonjs/module environment, the `$` global variable will be created.\n *\n * @name elly\n * @function\n * @param {String|HTMLElement} input The element selector (e.g.\n * `'#my-id > .my-class'`), the element tag you want to create\n * (e.g. `'<ul>'`) or the HTML element (will be returned by the function).\n * @param {Object|HTMLElement} contextOrAttributes\n * @returns {HTMLElement} The HTMLElement that was provided or selected.\n */\nfunction $(input, contextOrAttributes) {\n    if (typeof input === \"string\") {\n        if (input.charAt(0) === \"<\") {\n            input = document.createElement(input.slice(1, -1));\n            iterateObj(contextOrAttributes || {}, function (value, name) {\n\n                switch (name) {\n                    case \"text\":\n                        input.textContent = value;\n                        return;\n                    case \"html\":\n                        input.innerHTML = value;\n                        return;\n                }\n\n                input.setAttribute(name, value);\n            });\n            return input;\n        } else {\n            contextOrAttributes = contextOrAttributes || document;\n            return contextOrAttributes.querySelector(input);\n        }\n    }\n    return input;\n};\n\n/**\n * elly.$$\n * Selects multiple elements. Note that if there is no commonjs/module environment, you will access this function using `$.$$`.\n *\n * @name elly.$$\n * @function\n * @param {String} selector The DOM query selector.\n * @param {HTMLElement} context The element context/container. Defaults to `document`.\n * @returns {Array} The array of elements.\n */\n$.$$ = function (selector, context) {\n    if (typeof selector === \"string\") {\n        context = context || document;\n        return sliced(context.querySelectorAll(selector));\n    }\n    return [selector];\n};\n\nmodule.exports = $;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,gBAAgB,CAAC;EACtCC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,CAACA,CAACC,KAAK,EAAEC,mBAAmB,EAAE;EACnC,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAIA,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACzBF,KAAK,GAAGG,QAAQ,CAACC,aAAa,CAACJ,KAAK,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAClDT,UAAU,CAACK,mBAAmB,IAAI,CAAC,CAAC,EAAE,UAAUK,KAAK,EAAEC,IAAI,EAAE;QAEzD,QAAQA,IAAI;UACR,KAAK,MAAM;YACPP,KAAK,CAACQ,WAAW,GAAGF,KAAK;YACzB;UACJ,KAAK,MAAM;YACPN,KAAK,CAACS,SAAS,GAAGH,KAAK;YACvB;QACR;QAEAN,KAAK,CAACU,YAAY,CAACH,IAAI,EAAED,KAAK,CAAC;MACnC,CAAC,CAAC;MACF,OAAON,KAAK;IAChB,CAAC,MAAM;MACHC,mBAAmB,GAAGA,mBAAmB,IAAIE,QAAQ;MACrD,OAAOF,mBAAmB,CAACU,aAAa,CAACX,KAAK,CAAC;IACnD;EACJ;EACA,OAAOA,KAAK;AAChB;AAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,CAAC,CAACa,EAAE,GAAG,UAAUC,QAAQ,EAAEC,OAAO,EAAE;EAChC,IAAI,OAAOD,QAAQ,KAAK,QAAQ,EAAE;IAC9BC,OAAO,GAAGA,OAAO,IAAIX,QAAQ;IAC7B,OAAOL,MAAM,CAACgB,OAAO,CAACC,gBAAgB,CAACF,QAAQ,CAAC,CAAC;EACrD;EACA,OAAO,CAACA,QAAQ,CAAC;AACrB,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGlB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}