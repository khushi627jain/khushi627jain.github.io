{"ast":null,"code":"\"use strict\";\n\nvar colorLegend = require(\"github-calendar-legend\");\n\n/**\n * parseGitHubCalendarSvg\n * Parses the SVG input (as string).\n *\n * @name parseGitHubCalendarSvg\n * @function\n * @param {String} input The SVG code of the contributions calendar.\n * @return {Object} An object containing:\n *\n *  - `last_year` (Number): The total contributions in the last year.\n *  - `longest_streak` (Number): The longest streak.\n *  - `longest_streak_range` (Array): An array of two date objects representing the date range.\n *  - `current_streak` (Number): The current streak.\n *  - `current_streak_range` (Array): An array of two date objects representing the date range.\n *  - `days` (Array): An array of day objects:\n *       - `fill` (String): The hex color.\n *       - `date` (Date): The day date.\n *       - `count` (Number): The number of commits.\n *       - `level` (Number): A number between 0 and 4 (inclusive) representing the contribution level (more commits, higher value).\n *  - `weeks` (Array): The day objects grouped by weeks (arrays).\n *  - `last_contributed` (Date): The last contribution date.\n */\nmodule.exports = function parseGitHubCalendarSvg(input) {\n  var data = {\n      last_year: 0,\n      longest_streak: -1,\n      longest_streak_range: [],\n      current_streak: 0,\n      current_streak_range: [],\n      longest_break: -1,\n      longest_break_range: [],\n      current_break: 0,\n      current_break_range: [],\n      weeks: [],\n      days: [],\n      last_contributed: null\n    },\n    lastWeek = [],\n    updateLongestStreak = function updateLongestStreak() {\n      if (data.current_streak > data.longest_streak) {\n        data.longest_streak = data.current_streak;\n        data.longest_streak_range[0] = data.current_streak_range[0];\n        data.longest_streak_range[1] = data.current_streak_range[1];\n      }\n    },\n    updateLongestBreak = function updateLongestBreak() {\n      if (data.current_break > data.longest_break) {\n        data.longest_break = data.current_break;\n        data.longest_break_range[0] = data.current_break_range[0];\n        data.longest_break_range[1] = data.current_break_range[1];\n      }\n    };\n  input.split(\"\\n\").slice(2).map(function (c) {\n    return c.trim();\n  }).forEach(function (c) {\n    if (c.startsWith(\"<g transform\")) {\n      return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);\n    }\n    var level = c.match(/data-level=\"([0-9\\-]+)\"/i),\n      date = c.match(/data-date=\"([0-9\\-]+)\"/),\n      count = c.match(/(No|[0-9]+)( contribution)/);\n    level = level && level[1];\n    date = date && date[1];\n    if (count) {\n      if (count[1] === \"No\") {\n        count[1] = 0;\n      }\n      count = +count[1];\n    } else {\n      count = 0;\n    }\n    if (!level) {\n      return;\n    }\n    var fill = colorLegend[level];\n    var obj = {\n      fill: fill,\n      date: new Date(date),\n      count: count,\n      level: level\n    };\n    if (data.current_streak === 0) {\n      data.current_streak_range[0] = obj.date;\n    }\n    if (data.current_break === 0) {\n      data.current_break_range[0] = obj.date;\n    }\n    if (obj.count) {\n      ++data.current_streak;\n      data.last_year += obj.count;\n      data.last_contributed = obj.date;\n      data.current_streak_range[1] = obj.date;\n      updateLongestBreak();\n      data.current_break = 0;\n    } else {\n      updateLongestStreak();\n      data.current_streak = 0;\n      ++data.current_break;\n      data.current_break_range[1] = obj.date;\n    }\n    lastWeek.push(obj);\n    data.days.push(obj);\n  });\n  updateLongestStreak();\n  return data;\n};","map":{"version":3,"names":["colorLegend","require","module","exports","parseGitHubCalendarSvg","input","data","last_year","longest_streak","longest_streak_range","current_streak","current_streak_range","longest_break","longest_break_range","current_break","current_break_range","weeks","days","last_contributed","lastWeek","updateLongestStreak","updateLongestBreak","split","slice","map","c","trim","forEach","startsWith","length","push","level","match","date","count","fill","obj","Date"],"sources":["C:/Users/ashi3/Desktop/wED1/gifthub/2nd day/meghkhush2/deepshikha_jain_pw11_240/unit-7/sprint-2/day-1/you/portfolio/node_modules/github-calendar-parser/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar colorLegend = require(\"github-calendar-legend\");\n\n/**\n * parseGitHubCalendarSvg\n * Parses the SVG input (as string).\n *\n * @name parseGitHubCalendarSvg\n * @function\n * @param {String} input The SVG code of the contributions calendar.\n * @return {Object} An object containing:\n *\n *  - `last_year` (Number): The total contributions in the last year.\n *  - `longest_streak` (Number): The longest streak.\n *  - `longest_streak_range` (Array): An array of two date objects representing the date range.\n *  - `current_streak` (Number): The current streak.\n *  - `current_streak_range` (Array): An array of two date objects representing the date range.\n *  - `days` (Array): An array of day objects:\n *       - `fill` (String): The hex color.\n *       - `date` (Date): The day date.\n *       - `count` (Number): The number of commits.\n *       - `level` (Number): A number between 0 and 4 (inclusive) representing the contribution level (more commits, higher value).\n *  - `weeks` (Array): The day objects grouped by weeks (arrays).\n *  - `last_contributed` (Date): The last contribution date.\n */\nmodule.exports = function parseGitHubCalendarSvg(input) {\n\n    var data = {\n        last_year: 0,\n        longest_streak: -1,\n        longest_streak_range: [],\n        current_streak: 0,\n        current_streak_range: [],\n        longest_break: -1,\n        longest_break_range: [],\n        current_break: 0,\n        current_break_range: [],\n        weeks: [],\n        days: [],\n        last_contributed: null\n    },\n        lastWeek = [],\n        updateLongestStreak = function updateLongestStreak() {\n        if (data.current_streak > data.longest_streak) {\n            data.longest_streak = data.current_streak;\n            data.longest_streak_range[0] = data.current_streak_range[0];\n            data.longest_streak_range[1] = data.current_streak_range[1];\n        }\n    },\n        updateLongestBreak = function updateLongestBreak() {\n        if (data.current_break > data.longest_break) {\n            data.longest_break = data.current_break;\n            data.longest_break_range[0] = data.current_break_range[0];\n            data.longest_break_range[1] = data.current_break_range[1];\n        }\n    };\n\n    input.split(\"\\n\").slice(2).map(function (c) {\n        return c.trim();\n    }).forEach(function (c) {\n        if (c.startsWith(\"<g transform\")) {\n            return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);\n        }\n\n        var level = c.match(/data-level=\"([0-9\\-]+)\"/i),\n            date = c.match(/data-date=\"([0-9\\-]+)\"/),\n            count = c.match(/(No|[0-9]+)( contribution)/);\n\n        level = level && level[1];\n        date = date && date[1];\n        if (count) {\n            if (count[1] === \"No\") {\n                count[1] = 0;\n            }\n            count = +count[1];\n        } else {\n            count = 0;\n        }\n\n        if (!level) {\n            return;\n        }\n\n        var fill = colorLegend[level];\n\n        var obj = {\n            fill: fill,\n            date: new Date(date),\n            count: count,\n            level: level\n        };\n\n        if (data.current_streak === 0) {\n            data.current_streak_range[0] = obj.date;\n        }\n\n        if (data.current_break === 0) {\n            data.current_break_range[0] = obj.date;\n        }\n\n        if (obj.count) {\n            ++data.current_streak;\n            data.last_year += obj.count;\n            data.last_contributed = obj.date;\n            data.current_streak_range[1] = obj.date;\n\n            updateLongestBreak();\n            data.current_break = 0;\n        } else {\n            updateLongestStreak();\n            data.current_streak = 0;\n\n            ++data.current_break;\n            data.current_break_range[1] = obj.date;\n        }\n\n        lastWeek.push(obj);\n        data.days.push(obj);\n    });\n\n    updateLongestStreak();\n\n    return data;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}