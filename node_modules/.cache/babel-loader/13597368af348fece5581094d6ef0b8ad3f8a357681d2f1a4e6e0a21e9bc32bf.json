{"ast":null,"code":"\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar regexEscape = require(\"regex-escape\");\nvar ParseIt = function () {\n  /**\n   * ParseIt\n   * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n   *\n   * @name ParseIt\n   * @function\n   * @param {Object} obj An object containing the fields to replace.\n   */\n  function ParseIt(obj) {\n    _classCallCheck(this, ParseIt);\n    this.obj = obj || {};\n    this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n  }\n\n  /**\n   * run\n   * Replaces the fields in the format string with data coming from the data object.\n   *\n   *\n   * @name parseIt\n   * @function\n   * @param {String} format The format input.\n   * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n   * @return {String} The result as string.\n   */\n\n  _createClass(ParseIt, [{\n    key: \"run\",\n    value: function run(format, args) {\n      var result = \"\";\n      args = args || [];\n      do {\n        var arr = format.match(this.re),\n          field = arr && arr[1],\n          c = field || format.charAt(0);\n        if (field) {\n          var value = this.obj[field];\n          if (typeof value === \"function\") {\n            value = value.apply(this, args);\n          }\n          result += value;\n        } else {\n          result += c;\n        }\n        format = format.substring(c.length);\n      } while (format);\n      return result;\n    }\n  }]);\n  return ParseIt;\n}();\n\n/**\n * parseIt\n * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n *\n * @name parseIt\n * @function\n * @param {String} format The format input.\n * @param {Object} obj An object containing the fields to replace.\n * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n * @return {String} The result as string.\n */\n\nfunction parseIt(format, obj, args) {\n  return new ParseIt(obj).run(format, args);\n}\nparseIt.Parser = ParseIt;\nmodule.exports = parseIt;","map":{"version":3,"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","regexEscape","require","ParseIt","obj","re","RegExp","keys","map","join","value","run","format","args","result","arr","match","field","c","charAt","apply","substring","parseIt","Parser","module","exports"],"sources":["C:/Users/ashi3/Desktop/portfolio/node_modules/parse-it/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar regexEscape = require(\"regex-escape\");\n\nvar ParseIt = function () {\n    /**\n     * ParseIt\n     * The `ParseIt` class. It can be used to use the same data object but with different formats/arguments.\n     *\n     * @name ParseIt\n     * @function\n     * @param {Object} obj An object containing the fields to replace.\n     */\n    function ParseIt(obj) {\n        _classCallCheck(this, ParseIt);\n\n        this.obj = obj || {};\n        this.re = new RegExp(\"^(\" + Object.keys(obj).map(regexEscape).join(\"|\") + \")\");\n    }\n\n    /**\n     * run\n     * Replaces the fields in the format string with data coming from the data object.\n     *\n     *\n     * @name parseIt\n     * @function\n     * @param {String} format The format input.\n     * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n     * @return {String} The result as string.\n     */\n\n\n    _createClass(ParseIt, [{\n        key: \"run\",\n        value: function run(format, args) {\n            var result = \"\";\n            args = args || [];\n            do {\n                var arr = format.match(this.re),\n                    field = arr && arr[1],\n                    c = field || format.charAt(0);\n\n                if (field) {\n                    var value = this.obj[field];\n                    if (typeof value === \"function\") {\n                        value = value.apply(this, args);\n                    }\n                    result += value;\n                } else {\n                    result += c;\n                }\n                format = format.substring(c.length);\n            } while (format);\n            return result;\n        }\n    }]);\n\n    return ParseIt;\n}();\n\n/**\n * parseIt\n * A wrapper around the `ParseIt` class. The `ParseIt` constructor is accessible using `parseIt.Parser`.\n *\n * @name parseIt\n * @function\n * @param {String} format The format input.\n * @param {Object} obj An object containing the fields to replace.\n * @param {Array} args An array of arguments to be passed to the replace function (stored in the `obj` object).\n * @return {String} The result as string.\n */\n\n\nfunction parseIt(format, obj, args) {\n    return new ParseIt(obj).run(format, args);\n}\n\nparseIt.Parser = ParseIt;\n\nmodule.exports = parseIt;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}